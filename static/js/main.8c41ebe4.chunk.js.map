{"version":3,"sources":["components/Form.jsx","components/ImagePreview.jsx","components/Result.jsx","App.js","serviceWorker.js","index.js"],"names":["Form","props","className","style","padding","id","onChange","changeEvent","type","name","placeholder","defaultValue","value","changeImageEvent","ImagePreview","section","image","maxWidth","maxHeight","objectFit","URL","createObjectURL","src","alt","imageName","Result","url","category","title","result","e","console","log","target","onClick","toCopy","document","querySelector","select","setSelectionRange","execCommand","App","useState","data","setData","files","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8c41ebe4.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Form(props) {\n  const style = {\n    padding: \"20px\",\n  };\n  return (\n    <div className=\"form-container\" style={style}>\n      <h3 className=\"section-title\">Formulario Noticia</h3>\n      <form id=\"Form\">\n        <div className=\"form-row\">\n          <div className=\"form-group col-lg\">\n            <input\n              onChange={props.changeEvent}\n              type=\"text\"\n              name=\"title\"\n              className=\"form-control\"\n              id=\"title\"\n              placeholder=\"Título de la noticia\"\n            />\n          </div>\n          <div className=\"form-group col-lg\">\n            <select\n              onChange={props.changeEvent}\n              name=\"category\"\n              className=\"form-control\"\n              id=\"category\"\n            >\n              <option defaultValue>Seleccionar Categoría</option>\n              <option value=\"farandula\">Farandula</option>\n              <option value=\"deportes\">Deportes</option>\n              <option value=\"noticias_eeuu\">Noticias EEUU</option>\n              <option value=\"mundo\">Mundo</option>\n              <option value=\"noticias_radio\">Noticias Radio</option>\n            </select>\n          </div>\n        </div>\n        <div className=\"form-group\">\n          <input\n            type=\"file\"\n            name=\"image\"\n            onChange={props.changeImageEvent}\n            className=\"form-control\"\n            id=\"image\"\n          />\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Form;\n","import React from \"react\";\n\nfunction ImagePreview(props) {\n  const style = {\n    section: {\n      padding: \"20px\",\n    },\n    image: {\n      maxWidth: \"650px\",\n      maxHeight: \"380px\",\n      objectFit: \"cover\",\n    },\n  };\n  const image = props.image ? URL.createObjectURL(props.image) : \"\";\n  return (\n    <div className=\"preview-container\" style={style.section}>\n      <h3 className=\"section-title\">Vista Previa</h3>\n      <img src={image} alt={props.imageName} style={style.image} />\n    </div>\n  );\n}\n\nexport default ImagePreview;\n","import React from \"react\";\n\nfunction Result(props) {\n  const url = `/images/noticias/${props.category}/${props.image}`;\n  const image = `<img src=\"${url}\" alt=\"${props.title}\" class=\"wclm-img-container\" />`;\n  const result = `{modal auto_titles=\"false\" url=\"${url}\"}${image}{/modal}`;\n  const style = {\n    padding: \"20px\",\n  };\n  const handleClick = () => {\n    const toCopy = document.querySelector(\"#result\");\n    toCopy.select();\n    toCopy.setSelectionRange(0, 99999);\n    document.execCommand(\"copy\");\n  };\n\n  const handleChange = (e) => {\n    console.log(e.target);\n  };\n\n  return (\n    <div className=\"result-container\" style={style}>\n      <div className=\"form-group\">\n        <h3 className=\"section-title\">Muestra Resultado</h3>\n        <textarea\n          onChange={handleChange}\n          className=\"form-control\"\n          id=\"result\"\n          value={result}\n        ></textarea>\n      </div>\n      <div className=\"form-group\">\n        <button onClick={handleClick} className=\"btn btn-outline-secondary\">\n          Copy\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Result;\n","import React, { useState } from \"react\";\n// style\nimport \"./App.css\";\n// components\nimport Form from \"./components/Form\";\nimport ImagePreview from \"./components/ImagePreview\";\nimport Result from \"./components/Result\";\n\nfunction App() {\n  const [data, setData] = useState({ title: \"\", category: \"\", image: \"\" });\n\n  // Events\n  const handleChange = (e) => {\n    setData({ ...data, [e.target.name]: e.target.value });\n  };\n  const handleChangeImage = (e) => {\n    setData({ ...data, [e.target.name]: e.target.files[0] });\n  };\n\n  return (\n    <div className=\"App row\">\n      <div className=\"col-lg\">\n        <Form changeEvent={handleChange} changeImageEvent={handleChangeImage} />\n        <Result\n          image={data.image.name}\n          title={data.title}\n          category={data.category}\n        />\n      </div>\n      <div className=\"col-lg\">\n        <ImagePreview image={data.image} imageName={data.title} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}